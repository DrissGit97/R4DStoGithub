1. In a single pipeline for each condition, find all flights that meet
the condition:
Had an arrival delay of two or more hours

filter(arrival_delay >= 120)

Flew to Houston (IAH or HOU)

filter(dest=IAH|dest=HOU)

Were operated by United, American, or Delta

filter(carrier %in% c("United", "American", "Delta") 

Departed in summer (July, August, and September)

filter( month == July & month == August & month == September) 

Arrived more than two hours late, but didn’t leave late

filter(arrival_delay > 120 & departure_delay < 0)

Were delayed by at least an hour, but made up more than
30 minutes in flight

filter(dep_delay >= 60, arr_delay < 30)

2. Sort flights to find the flights with the longest departure
delays. Find the flights that left earliest in the morning.

arrange(desc(dept_delay)
group_by(day) |> arrange(time)

3. Sort flights to find the fastest flights. (Hint: Try including a
math calculation inside of your function.)

mutate(airtime = arrival_time - dep_time) |> arrange ( airtime)

4. Was there a flight on every day of 2013?

group_by(year, month, day) |> filter(is.na(day))

Yes.

5. Which flights traveled the farthest distance? Which traveled the
least distance?

flights |> filter(!is.na(tailnum)) |> group_by(tailnum) |> count(tailnum, wt = distance) |> arrange(desc(n))
flights |> filter(!is.na(tailnum)) |> group_by(tailnum) |> count(tailnum, wt = distance) |> arrange(n)

6. Does it matter what order you used filter() and arrange()
if you’re using both? Why/why not? Think about the results and
how much work the functions would have to do.

using filter first would be faster.
